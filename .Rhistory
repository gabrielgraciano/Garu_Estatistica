options = list(
searching = FALSE, # desabilita a opção de busca
paging = FALSE,    # desabilita a paginação
ordering = FALSE   # desabilita a ordenação
)
)
# Calcular frequência absoluta
frequencia_absoluta <- table(dados_paralisia$sexo)
# Calcular frequência relativa
frequencia_relativa <- prop.table(frequencia_absoluta)
# Criar dataframe para a tabela
dados_tabela <- data.frame(
Sexo = names(frequencia_absoluta),
Frequencia_Absoluta = as.numeric(frequencia_absoluta),
Frequencia_Relativa = as.numeric(frequencia_relativa)
)
# Adicionar linha de cabeçalho personalizada
header <- list(
extend = "both",
callback = JS(
"function(thead, data, start, end, display) {",
"  $(thead).find('tr').eq(0).append('<th colspan=\"3\" rowspan=\"2\">Sexo</th>');",
"  $(thead).find('tr').eq(1).before('<tr><th>Menino</th><th>Menina</th><th>Menino</th></tr>');",
"}"
)
)
# Criar a tabela DT
datatable(dados_tabela,
options = list(
searching = FALSE, # desabilita a opção de busca
paging = FALSE,    # desabilita a paginação
ordering = FALSE   # desabilita a ordenação
),
callback = JS(header)
)
# Calcular frequência absoluta
frequencia_absoluta <- table(dados_paralisia$sexo)
# Calcular frequência relativa
frequencia_relativa <- prop.table(frequencia_absoluta)
# Criar dataframe para a tabela
dados_tabela <- data.frame(
Sexo = names(frequencia_absoluta),
Frequencia_Absoluta = as.numeric(frequencia_absoluta),
Frequencia_Relativa = as.numeric(frequencia_relativa)
)
# Adicionar linha de cabeçalho personalizada
header <- c(
"extend = 'both',",
"callback = ",
"  function(thead, data, start, end, display) {",
"    $(thead).find('tr').eq(0).append('<th colspan=\"2\" rowspan=\"2\">Sexo</th>');",
"    $(thead).find('tr').eq(1).before('<tr><th>Menino</th><th>Menina</th></tr>');",
"  }"
)
# Criar a tabela DT
datatable(dados_tabela,
options = list(
searching = FALSE, # desabilita a opção de busca
paging = FALSE,    # desabilita a paginação
ordering = FALSE   # desabilita a ordenação
),
callback = JS(header)
)
# Criar a tabela DT
datatable(dados_tabela,
options = list(
searching = FALSE, # desabilita a opção de busca
paging = FALSE,    # desabilita a paginação
ordering = FALSE   # desabilita a ordenação
),
callback = JS(header)
)
# Calcular frequência absoluta
frequencia_absoluta <- table(dados_paralisia$sexo)
# Calcular frequência relativa
frequencia_relativa <- prop.table(frequencia_absoluta)
# Criar dataframe para a tabela
dados_tabela <- data.frame(
Sexo = names(frequencia_absoluta),
Frequencia_Absoluta = as.numeric(frequencia_absoluta),
Frequencia_Relativa = as.numeric(frequencia_relativa)
)
# Criar a tabela DT
datatable(
cbind(
"Sexo" = c("Menino", "Menina"),
dados_tabela[, 2:3]
),
rownames = FALSE,
options = list(
searching = FALSE, # desabilita a opção de busca
paging = FALSE,    # desabilita a paginação
ordering = FALSE   # desabilita a ordenação
)
)
# Calcular frequência absoluta
frequencia_absoluta <- table(dados_paralisia$sexo)
# Calcular frequência relativa
frequencia_relativa <- prop.table(frequencia_absoluta)
# Criar dataframe para a tabela
dados_tabela <- data.frame(
Categoria = c("Sexo", "Menino", "Menina"),
Frequencia_Absoluta = as.numeric(frequencia_absoluta),
Frequencia_Relativa = as.numeric(frequencia_relativa)
)
# Criar a tabela DT
datatable(
dados_tabela,
options = list(
searching = FALSE, # desabilita a opção de busca
paging = FALSE,    # desabilita a paginação
ordering = FALSE   # desabilita a ordenação
)
)
# Calcular frequência absoluta
frequencia_absoluta <- table(dados_paralisia$sexo)
# Calcular frequência relativa
frequencia_relativa <- prop.table(frequencia_absoluta)
# Criar dataframe para a tabela
dados_tabela <- data.frame(
Sexo = c("Sexo", "Menino", "Menina"),
Frequencia_Absoluta = c(sum(frequencia_absoluta), frequencia_absoluta),
Frequencia_Relativa = c(NA, frequencia_relativa)
)
# Criar a tabela DT
datatable(
dados_tabela,
rownames = FALSE,  # Ocultar os números das linhas
options = list(
searching = FALSE, # desabilita a opção de busca
paging = FALSE,    # desabilita a paginação
ordering = FALSE   # desabilita a ordenação
)
)
# Calcular frequência absoluta
frequencia_absoluta <- table(dados_paralisia$sexo)
# Calcular frequência relativa
frequencia_relativa <- prop.table(frequencia_absoluta)
# Criar dataframe para a tabela
dados_tabela <- data.frame(
Sexo = c("Sexo", "Menino", "Menina"),
Frequencia_Absoluta = c(sum(frequencia_absoluta), frequencia_absoluta),
Frequencia_Relativa = c(NA, frequencia_relativa)
)
# Criar a tabela DT
datatable(
dados_tabela,
rownames = FALSE,  # Ocultar os números das linhas
options = list(
searching = FALSE, # desabilita a opção de busca
paging = FALSE,    # desabilita a paginação
ordering = FALSE,   # desabilita a ordenação
columnDefs = list(
list(visible = FALSE, targets = c(0))  # Ocultar a primeira coluna
),
initComplete = JS(
"function(settings, json) {",
"  var table = settings.oInstance.api();",
"  table.cell({row: 1, column: 0}).data('Menino').draw();",
"  table.cell({row: 2, column: 0}).data('Menina').draw();",
"}"
)
)
)
# Criar a tabela DT
datatable(
dados_tabela,
rownames = FALSE,  # Ocultar os números das linhas
options = list(
searching = FALSE, # desabilita a opção de busca
paging = FALSE,    # desabilita a paginação
ordering = FALSE,   # desabilita a ordenação
columnDefs = list(
list(visible = FALSE, targets = c(0))  # Ocultar a primeira coluna
),
initComplete = JS(
"function(settings, json) {",
"  var table = settings.oInstance.api();",
"  table.cell({row: 1, column: 0}).data('Menino').draw();",
"  table.cell({row: 2, column: 0}).data('Menina').draw();",
"}"
)
)
)
library(DT)
# Calcular frequência absoluta
frequencia_absoluta <- table(dados_paralisia$sexo)
# Calcular frequência relativa
frequencia_relativa <- prop.table(frequencia_absoluta)
# Criar dataframe para a tabela
dados_tabela <- data.frame(
Sexo = c("Menino", "Menina"),
Frequencia_Absoluta = frequencia_absoluta,
Frequencia_Relativa = frequencia_relativa
)
# Adicionar linha "Sexo" como título
dados_tabela <- rbind(c("Sexo", NA, NA), dados_tabela)
# Criar a tabela DT
datatable(
dados_tabela,
rownames = FALSE,  # Ocultar os números das linhas
options = list(
searching = FALSE, # desabilita a opção de busca
paging = FALSE,    # desabilita a paginação
ordering = FALSE   # desabilita a ordenação
)
)
# Criar a tabela DT
datatable(
dados_tabela,
rownames = FALSE,  # Ocultar os números das linhas
options = list(
searching = FALSE, # desabilita a opção de busca
paging = FALSE,    # desabilita a paginação
ordering = FALSE   # desabilita a ordenação
)
)
# Calcular frequência absoluta
frequencia_absoluta <- table(dados_paralisia$sexo)
# Calcular frequência relativa
frequencia_relativa <- prop.table(frequencia_absoluta)
# Criar dataframe para a tabela
dados_tabela <- data.frame(
Sexo = NA,
Frequencia_Absoluta = NA,
Frequencia_Relativa = NA
)
# Adicionar linhas "Masculino" e "Feminino"
dados_tabela <- rbind(dados_tabela, c("Masculino", frequencia_absoluta["Masculino"], frequencia_relativa["Masculino"]))
dados_tabela <- rbind(dados_tabela, c("Feminino", frequencia_absoluta["Feminino"], frequencia_relativa["Feminino"]))
# Criar a tabela DT
datatable(
dados_tabela,
rownames = FALSE,  # Ocultar os números das linhas
options = list(
searching = FALSE, # desabilita a opção de busca
paging = FALSE,    # desabilita a paginação
ordering = FALSE   # desabilita a ordenação
)
)
frequência
# Calcular frequência absoluta
frequencia_absoluta <- table(dados_paralisia$sexo)
# Calcular frequência relativa
frequencia_relativa <- prop.table(frequencia_absoluta)
# Criar dataframe para a tabela
dados_tabela <- data.frame(
Sexo = NA,
Frequencia_Absoluta = NA,
Frequencia_Relativa = NA
)
# Adicionar linhas "Masculino" e "Feminino" sob a linha "Sexo"
dados_tabela <- rbind(dados_tabela, c("Sexo", NA, NA))
dados_tabela <- rbind(dados_tabela, c("Masculino", frequencia_absoluta["Masculino"], frequencia_relativa["Masculino"]))
dados_tabela <- rbind(dados_tabela, c("Feminino", frequencia_absoluta["Feminino"], frequencia_relativa["Feminino"]))
# Criar a tabela DT
datatable(
dados_tabela,
rownames = FALSE,  # Ocultar os números das linhas
options = list(
searching = FALSE, # desabilita a opção de busca
paging = FALSE,    # desabilita a paginação
ordering = FALSE   # desabilita a ordenação
)
)
# Calcular frequência absoluta
frequencia_absoluta <- table(dados_paralisia$sexo)
# Calcular frequência relativa
frequencia_relativa <- prop.table(frequencia_absoluta)
# Criar dataframe para a tabela
dados_tabela <- data.frame(
Sexo = "Sexo",
Frequencia_Absoluta = NA,
Frequencia_Relativa = NA,
row_type = "parent" # Indica que esta é uma linha pai
)
# Adicionar linhas "Masculino" e "Feminino" como filhos de "Sexo"
dados_tabela <- rbind(dados_tabela,
data.frame(Sexo = "Masculino",
Frequencia_Absoluta = frequencia_absoluta["Masculino"],
Frequencia_Relativa = frequencia_relativa["Masculino"],
row_type = "child"), # Indica que esta é uma linha filho
data.frame(Sexo = "Feminino",
Frequencia_Absoluta = frequencia_absoluta["Feminino"],
Frequencia_Relativa = frequencia_relativa["Feminino"],
row_type = "child")  # Indica que esta é uma linha filho
)
# Calcular frequência absoluta
frequencia_absoluta <- table(dados_paralisia$sexo)
frequencia_absoluta <- as.character(frequencia_absoluta)  # Convertendo para character
# Calcular frequência relativa
frequencia_relativa <- prop.table(frequencia_absoluta)
# Convertendo frequencia_absoluta e frequencia_relativa para numeric
frequencia_absoluta <- as.numeric(frequencia_absoluta)
frequencia_relativa <- as.numeric(frequencia_relativa)
# Criar dataframe para a tabela
dados_tabela <- data.frame(
Sexo = "Sexo",
Frequencia_Absoluta = NA,
Frequencia_Relativa = NA,
row_type = "parent" # Indica que esta é uma linha pai
)
# Adicionar linhas "Masculino" e "Feminino" como filhos de "Sexo"
dados_tabela <- rbind(dados_tabela,
data.frame(Sexo = "Masculino",
Frequencia_Absoluta = frequencia_absoluta["Masculino"],
Frequencia_Relativa = frequencia_relativa["Masculino"],
row_type = "child"), # Indica que esta é uma linha filho
data.frame(Sexo = "Feminino",
Frequencia_Absoluta = frequencia_absoluta["Feminino"],
Frequencia_Relativa = frequencia_relativa["Feminino"],
row_type = "child")  # Indica que esta é uma linha filho
)
# Criar a tabela DT
datatable(
dados_tabela,
rownames = FALSE,  # Ocultar os números das linhas
options = list(
searching = FALSE, # Desabilitar a opção de busca
paging = FALSE,    # Desabilitar a paginação
ordering = FALSE,  # Desabilitar a ordenação
columnDefs = list(list(visible=FALSE, targets=c(3))) # Ocultar a coluna "row_type"
),
# Configurar linhas filhas
childRows = JS(
"function (details, parentIndex, rowData, level) {",
"  if (rowData[3] === 'parent') {", # Verifica se a linha é pai
"    return [", # Retorna os detalhes das linhas filhas
"      {",
"        'Sexo': 'Frequência Absoluta:',",
"        'Frequencia_Absoluta': rowData[1],", # Frequência absoluta da linha pai
"        'Frequencia_Relativa': '',",
"        'row_type': 'child'", # Define como linha filho
"      },",
"      {",
"        'Sexo': 'Frequência Relativa:',",
"        'Frequencia_Absoluta': rowData[2],", # Frequência relativa da linha pai
"        'Frequencia_Relativa': '',",
"        'row_type': 'child'", # Define como linha filho
"      }",
"    ];",
"  } else {",
"    return null;", # Retorna nulo se a linha não for pai
"  }",
"}"
)
)
# Configurar linhas filhas
nested_table <- paste0(
"<thead>",
"</thead>",
"<tr><td>Masculino</td><td>", frequencia_absoluta["Masculino"], "</td><td>", frequencia_relativa["Masculino"], "</td></tr>",
"</tbody>",
)
# Display nested table
HTML(nested_table)
library(htmltools)
library(htmlwidgets)
# Configurar linhas filhas
nested_table <- paste0(
"<thead>",
"</thead>",
"<tr><td>Masculino</td><td>", frequencia_absoluta["Masculino"], "</td><td>", frequencia_relativa["Masculino"], "</td></tr>",
"</tbody>",
)
# Display nested table
HTML(nested_table)
# Calculate absolute and relative frequencies
frequencia_absoluta <- table(dados_paralisia$sexo)
frequencia_relativa <- prop.table(frequencia_absoluta)
# Create nested table using DT package
dados_tabela <- data.frame(
Sexo = c("Masculino", "Feminino"),
Frequencia_Absoluta = frequencia_absoluta,
Frequencia_Relativa = frequencia_relativa
)
# Create nested table with DT
datatable(
dados_tabela,
rownames = FALSE,
options = list(
searching = FALSE,
paging = FALSE,
info = FALSE,
columnDefs = list(
list(visible = FALSE, targets = c(2, 3)) # Hide absolute and relative frequency columns
)
),
rowCallback = JS(
"function(row, data, index) {",
"  if (index == 0) {",
"    $(row).addClass('parent');",
"    $(row).children('td:first').attr('colspan', 3);",
"  } else {",
"    $(row).addClass('child');",
"  }",
"}"
),
callback = JS(
"table.column(1).visible(true);",
"table.column(2).visible(true);"
)
)
# Create the data frame with absolute and relative frequencies
dados_tabela <- data.frame(
Sexo = c("Sexo", "Masculino", "Feminino"),
Frequencia_Absoluta = c(sum(dados_paralisia$sexo == "Masculino"), sum(dados_paralisia$sexo == "Feminino")),
Frequencia_Relativa = c(mean(dados_paralisia$sexo == "Masculino"), mean(dados_paralisia$sexo == "Feminino"))
)
# Create the HTML table with colspan
html_table <- paste0(
"<table border='1'>",
"<tr>",
"<td colspan='3' align='center'>Sexo</td>",
"</tr>",
"<tr>",
"<td></td>",
"<td>Frequência Absoluta</td>",
"<td>Frequência Relativa</td>",
"</tr>",
"<tr>",
paste("<td>", dados_tabela$Sexo[2], "</td>", sep = ""),
paste("<td>", dados_tabela$Frequencia_Absoluta[1], "</td>", sep = ""),
paste("<td>", dados_tabela$Frequencia_Relativa[1], "</td>", sep = ""),
"</tr>",
"<tr>",
paste("<td>", dados_tabela$Sexo[3], "</td>", sep = ""),
paste("<td>", dados_tabela$Frequencia_Absoluta[2], "</td>", sep = ""),
paste("<td>", dados_tabela$Frequencia_Relativa[2], "</td>", sep = ""),
"</tr>",
"</table>"
)
# Display the HTML table
html_table
# Display the HTML table
html_table
View(dados_tabela)
summary(dados_paralisia)
# Create the data frame with absolute and relative frequencies
dados_tabela <- data.frame(
Sexo = c("Sexo", "Menino", "Menina"),
Frequencia_Absoluta = c(sum(dados_paralisia$sexo == "Menino"), sum(dados_paralisia$sexo == "Menina")),
Frequencia_Relativa = c(mean(dados_paralisia$sexo == "Menino"), mean(dados_paralisia$sexo == "Menina"))
)
# Create the HTML table with colspan
html_table <- paste0(
"<table border='1'>",
"<tr>",
"<td colspan='3' align='center'>Sexo</td>",
"</tr>",
"<tr>",
"<td></td>",
"<td>Frequência Absoluta</td>",
"<td>Frequência Relativa</td>",
"</tr>",
"<tr>",
paste("<td>", dados_tabela$Sexo[2], "</td>", sep = ""),
paste("<td>", dados_tabela$Frequencia_Absoluta[1], "</td>", sep = ""),
paste("<td>", dados_tabela$Frequencia_Relativa[1], "</td>", sep = ""),
"</tr>",
"<tr>",
paste("<td>", dados_tabela$Sexo[3], "</td>", sep = ""),
paste("<td>", dados_tabela$Frequencia_Absoluta[2], "</td>", sep = ""),
paste("<td>", dados_tabela$Frequencia_Relativa[2], "</td>", sep = ""),
"</tr>",
"</table>"
)
# Display the HTML table
html_table
library(DT)
# Sample data
dados_paralisia <- data.frame(
Sexo = c("menino", "menino", "menino", "menino", "menino", "menina", "menina", "menina"),
Frequencia_Absoluta = c(10, 20, 15, 25, 30, 12, 18, 22),
Frequencia_Relativa = c(0.1, 0.2, 0.15, 0.25, 0.3, 0.12, 0.18, 0.22)
)
# Create HTML table
html_table <- paste0("<table border='1'><tr><td colspan='3' align='center'>Sexo</td></tr><tr><td></td><td>Frequência Absoluta</td><td>Frequência Relativa</td></tr>")
# Add rows for 'menino' and 'menina'
for (i in 1:nrow(dados_paralisia)) {
html_table <- paste0(html_table, "<tr><td>", dados_paralisia$Sexo[i], "</td><td>", dados_paralisia$Frequencia_Absoluta[i], "</td><td>", dados_paralisia$Frequencia_Relativa[i], "</td></tr>")
}
# Close the table tag
html_table <- paste0(html_table, "</table>")
# Display the HTML table
htmltools::HTML(html_table)
shiny::runApp()
View(dados_paralisia)
dados_paralisia <- read.csv('data/dados_paralisia_clean.csv')
# Configurar restante das variáveis
dados_paralisia$sexo <- factor(dados_paralisia$sexo)
dados_paralisia$grupo <- factor(dados_paralisia$grupo)
dados_paralisia$idade <- as.numeric(dados_paralisia$idade)
dados_paralisia$perda_audit <- factor(dados_paralisia$perda_audit)
dados_paralisia$dist_comun <- factor(dados_paralisia$dist_comun)
dados_paralisia$dmo <- factor(dados_paralisia$dmo, ordered = TRUE)
dados_paralisia$td_liquido <- as.numeric(dados_paralisia$td_liquido)
dados_paralisia$td_pastoso <- as.numeric(dados_paralisia$td_pastoso)
dados_paralisia$td_solido <- as.numeric(dados_paralisia$td_solido)
View(dados_paralisia)
dados_paralisia <- dados_paralisia[,-1]
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
